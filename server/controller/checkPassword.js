const UserModel = require("../models/UserModel");
const bcryptjs = require("bcryptjs");
const jwt = require("jsonwebtoken");

const generateRandomPassword = () => {
    const length = 12;
    const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()";
    let password = "";
    for (let i = 0; i < length; i++) {
        const randomIndex = Math.floor(Math.random() * charset.length);
        password += charset[randomIndex];
    }
    return password;
};

const checkPassword = async (req, res) => {
    try {
        const { autoGenerated, email, name, profile_pic, userId, password } = req.body;

        if (autoGenerated) {
            let user = await UserModel.findOne({ email });

            if (!user) {
                const generatedPassword = generateRandomPassword();
                const hashedPassword = await bcryptjs.hash(generatedPassword, 10);

                user = new UserModel({
                    email,
                    name,
                    password: hashedPassword,
                    profile_pic,
                });
                await user.save();
            }

            const tokenData = {
                userId: user._id,
                email: user.email,
            };
            const token = jwt.sign(tokenData, process.env.JWT_SECRET_KEY, { expiresIn: "1d" });
            const cookieOptions = {
                httpOnly: true,
                secure: process.env.NODE_ENV === 'production',
            };
            return res.cookie("token", token, cookieOptions).status(201).json({ message: `Welcome, ${name}`, token });
        }

        const user = await UserModel.findById(userId);
        if (!user) {
            return res.status(404).json({ message: "User not found" });
        }

        const isValidPassword = await bcryptjs.compare(password, user.password);
        if (!isValidPassword) {
            return res.status(401).json({ message: "Invalid password" });
        }

        const tokenData = {
            userId: user._id,
            email: user.email,
        };
        const token = jwt.sign(tokenData, process.env.JWT_SECRET_KEY, { expiresIn: "1d" });
        const cookieOptions = {
            httpOnly: true,
            secure: process.env.NODE_ENV === 'production', 
        };
        res.cookie("token", token, cookieOptions).status(201).json({ message: `Welcome, ${user.username}`, token });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: "Internal Server Error" });
    }
};

module.exports = checkPassword;